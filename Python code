import os
import json

class ExpenseTracker:
    def __init__(self, filename="expenses.json"):
        self.filename = filename
        self.expenses = self.load_expenses()

    def load_expenses(self):
        if os.path.exists(self.filename):
            with open(self.filename, "r") as file:
                return json.load(file)
        return []

    def save_expenses(self):
        with open(self.filename, "w") as file:
            json.dump(self.expenses, file, indent=4)

    def add_expense(self, description, amount):
        expense = {"description": description, "amount": amount}
        self.expenses.append(expense)
        self.save_expenses()
        print("Expense added successfully.")

    def view_expenses(self):
        if not self.expenses:
            print("No expenses recorded.")
            return
        print("\nRecorded Expenses:")
        for idx, expense in enumerate(self.expenses, start=1):
            print(f"{idx}. {expense['description']} - ₹{expense['amount']}")
        print("\n")

    def total_expenses(self):
        total = sum(expense["amount"] for expense in self.expenses)
        print(f"Total Expenses: ₹{total}\n")


def main():
    tracker = ExpenseTracker()

    while True:
        print("\nExpense Tracker Menu:")
        print("1. Add Expense")
        print("2. View Expenses")
        print("3. View Total Expenses")
        print("4. Exit")

        choice = input("Choose an option: ")

        if choice == "1":
            description = input("Enter expense description: ")
            try:
                amount = float(input("Enter amount: "))
                tracker.add_expense(description, amount)
            except ValueError:
                print("Invalid amount. Please enter a number.")
        elif choice == "2":
            tracker.view_expenses()
        elif choice == "3":
            tracker.total_expenses()
        elif choice == "4":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
